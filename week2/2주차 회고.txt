우아한테크코스 프리코스 2주차 회고
이창근


1. 지원서에 작성한 목표를 얼마나 달성하고 있다고 생각하나요? 그 이유는 무엇인가요?

저는 지원서에 작성했던 목표들을 잘 달성해 나가고 있다고 생각합니다.
제가 세웠던 목표는 크게 3가지였습니다. 문제를 천천히 보고 사고한 후에 코딩하기, 객체지향을 충분히 녹여내기, 리팩터링을 철저히 하기였습니다. 이 목표들을 다음과 같이 고민하며 이루기 위해 노력했고, 좋은 결과를 얻고 있습니다.

첫 번째로 문제를 천천히 보고 사고한 후에 코딩하고 있습니다. 덕분에 각 과제에서 집중해서 구현해야 하는 부분을 파악하고 이에 맞는 아키텍쳐를 사용하고 있습니다.
예를 들어 이번 2주차 과제에서는 '불확실한 외부 의존성'이 큰 키워드였습니다. Randoms를 사용하면 그 결괏값이 불확실하기 때문에 테스트하기 매우 어렵고, 테스트하지 않으면 회귀 버그가 발생하거나 코드가 유연하지 못하게 될 것 같았습니다. 이것을 어떻게 처리할지 고민하다가 의존성 역전을 활용했습니다. RandomAdapter를 통해 난수를 뽑는 역할을 추상화하고, MissionUtilsRandomApater를 구현하여 실제 무작위 값을 뽑았습니다. 이를 통해 테스트에서는 다른 테스트 대역 객체를 끼워 넣을 수 있었고, 반복할 수 있고 깨지지 않는 좋은 단위테스트를 작성할 수 있었습니다.
이렇게 생각하니 System.out.print()나 Console.redline() 같은 의존성을 바로 사용했던 1주차의 아키텍쳐도 좋아 보이지 않았습니다. 의존성 역전을 활용하면 이를 유연하게 다른 객체로 갈아 끼워서 테스트할 수 있겠다는 생각도 들었습니다. 그래서 Reader와 Writer 같은 인터페이스를 도입하게 되었습니다.
이런 고민들을 코딩을 시작하기 전에 충분히 한 후에 돌입하는 습관을 들였고, 결과적으로 더 좋은 아키텍쳐를 구성할 수 있게 되었습니다.

두 번째로 객체지향을 충분히 녹여내고 있습니다.
전에 Spring으로 개발할 때는 어떤 반동에 의해 개발했던 것 같습니다. 컨트롤러를 만들고 서비스를 만들고 리포지토리는 Spring Data JPA를 사용하고, 엔티티를 작성하고... 이런 일련의 과정을 무의식적으로 반복하고 있었습니다. 그리고 그렇게 짜인 코드는 객체지향적이지 못했습니다. 서비스에 도메인 코드가 적혀있고, 엔티티 객체와 도메인객체를 구분하지 못했습니다.
하지만 이번 프리코스에서는 그 어떠한 강력한 도구도 주어지지 않습니다. 이런 환경에서 코드를 작성하려다 보니 한 객체를 작성할 때는 하나의 목표가 필요했습니다. '자동차가 움직여야 하니까', '입력값을 검증해야 하니까', '최종 우승자를 가려야 하니까' 등의 이유로 객체를 만들고 작성하기 시작하면 그 객체의 역할이 매우 명확해집니다. 어떤 코드가 필요하고 어떤 코드는 분리해야 하는지 확인할 수 있었습니다. 덕분에 도메인 코드가 더욱 순수해졌고, 도메인 컨트롤러는 더욱 자신의 역할에 충실할 수 있었습니다.
또한 테스트의 도움도 많이 받았습니다. 기존에는 테스트 코드가 서비스 코드의 회귀를 방지한다는 점을 높게 평가하고 작성해 왔는데, 좋은 단위 테스트를 작성하려면 코드가 모듈화가 잘 되어있어야 했습니다. 즉 테스트 코드가 서비스 코드의 품질도 덩달아 높인다는 것을 느꼈습니다. 여러 단위 테스트를 작성하며 이런 모듈화에 대해 고민할 수 있었고, 1주차와 2주차 모두 풍부한 단위 테스트를 작성하며 객체지향을 잘 녹여냈습니다.

세 번째로 리팩터링을 철저히하기 인데, 이것은 프로그래밍 요구사항에 도움을 많이 받았습니다.
특히 2주차의 프로그래밍 요구사항에는 '인덴트 depth가 3을 넘지 않기', '메서드가 한 가지 일만 하도록 하기' 등의 요구사항이 있었습니다. 객체지향적으로 마음껏 코드를 작성한 후에는 코드를 하나하나 들여다보며 이런 요구사항들을 잘 준수하고 있는지 확인할 수 있었고, 잘 지켜지지 않은 부분에 있어서는 리팩터링을 했습니다. 역할이 과한 객체는 내부에서 메서드를 추출하거나, 다른 객체로 뽑아서 역할을 나눴습니다. 인덴트가 너무 깊은 등의 이유로 잘 읽히지 않는 코드들은 스트림이나 람다 표현식을 활용하여 가독성을 좋게 만들려고 노력했습니다.
또, '이름을 통해 의도를 드러낸다.', '의미 없는 주석을 달지 않는다.' 등의 1주차 공통 피드백을 통해 기존의 코드를 점검하고, 각 객체가 자신의 역할을 이름으로 잘 드러내고 있는지 확인할 수 있었습니다. 1주차에서는 주석을 모든 코드에 붙였는데, 그럴 필요가 없도록 이름을 고심하여 골랐습니다.
또 우아한테크코스 프리코스 디스코드 내에서 서로 PR을 리뷰할 수 있는 기회가 도움이 되었습니다. 내 코드에 대한 나와는 상반된 의견들을 들을 수 있고, 다른 사람들의 코드를 보며 좋다고 생각된 부분은 다음 주차에 바로 적용해 볼 수 있는 것이 장점인 것 같습니다.
또 테스트 이야기이지만, 테스트가 여기서도 도움을 줍니다. 잘 깨지지 않는 단위 테스트가 리팩터링에 대한 확신을 주고, 리팩터링 후에도 기능이 잘 작동하는지 확인할 수 있는 체크리스트로 활용되었습니다.

각 목표에 대해서 꾸준히 고민하고 실행한 결과 프리코스를 시작하기 전보다 더 좋은 코드를 보고 작성하는 실력이 상승한 것 같아 너무 기쁩니다. 프리코스를 시작하기 전에는 우아한테크코스의 선발 프로세스 정도로 알고 있었는데, 이제는 프리코스 자체가 우아한테크코스의 교육 중 하나이고, 이를 통해 많은 것을 얻어가고 있다는 것을 느낍니다.


2. 지원서에 작성한 목표를 변경해야 한다고 생각하시나요? 그렇다면 그 이유와 어떤 목표로 변경하고 싶으신가요?

변경할 필요는 없으나, 하나의 목표를 추가하고 싶습니다. 바로 'PR 잘 작성하기'입니다.
1주차 때 PR을 나름 열심히 작성했는데, 1주차가 끝나고 다른 멋진 분들의 PR을 보고 놀랐습니다. '이렇게나 자신의 코드를 다른 사람이 이해하게 하려고 노력하는구나.'라는 생각이 들었습니다. 생각해 보면 PR은 내 코드들을 한 번에 검토해야 하는 자리인데, 지금까지 코드를 짜왔던 제 시점에서 작성하면 안됐습니다. 아예 처음 보는 사람이라고 생각하고, 그리고 그 사람은 어떤 수준인지 모르니 최대한 쉽고 이해하기 좋게 작성해야 했습니다. 이런 생각들 끝에 구체적으로 다음 2가지 서브 목표들을 세웠습니다.

- 클래스 다이어그램을 그려서 한눈에 아키텍쳐 이해시키기 : 클래스 다이어그램이 클래스 간 관계를 표현하는데 탁월한 것은 알고 있었으나, 이것을 PR에 적용해 볼 생각은 전혀 못했습니다. 이제부터는 클래스 다이어그램을 통해서 리뷰어가 더 이해하기 쉽도록 작성하고자 합니다.
- 커밋 깔끔하게 남기기 : 코드를 한 번에 보고 이해하는 리뷰어도 존재하겠지만, 커밋의 흐름을 보고 이해하는 리뷰어도 존재합니다. 커밋 단위를 기능 단위로 깔끔하게 쪼개고, 커밋 제목은 이해하기 쉽게 남기고 필요하다면 커밋 설명에 해당 기능의 필요성도 잘 기재하려고 합니다.

2주차부터는 이런 서브 목표들을 잘 수행하며 PR도 잘 작성해 보려고 합니다.


3. 프리코스를 진행하면서 눈에 띄는 변화나 깨달은 점이 있나요?

저는 프리코스에서 다른 사람의 뛰어난 부분을 수용하는 자세가 생겼고, 이것이 저의 큰 장점이 되리라고 믿습니다.
전에는 다른 사람이 뛰어나면 그 실력의 격차에 의지를 잃고 자괴감이 몰려왔습니다. 모른다는 것이 두렵고 안 좋은 감정으로 다가왔습니다. 프리코스에서는 한 디스코드 채널에 1,000명이 넘고 있다 보니 저보다 아득히 뛰어난 개발자분들도 정말 많습니다. 처음에는 그런 멋진 개발자분들을 보며 제 무지를 많이 느끼고 안 좋은 감정을 많이 느꼈습니다.
그러다가 '토론하기' 채널을 조금씩 훔쳐봤습니다. 해당 채널에서는 한 주제에 대해서 여러 사람들이 자신의 의견을 자유로이 펼칩니다. 어떨 때는 상반되기도 하는 그런 의견들을 나누며 그들이 성장하고 있다는 느낌을 받았습니다. 며칠이 지나고 그들에게 압도되기보다는 그들과 많은 이야기를 주고받으며 그들의 장점을 흡수하고 싶어졌습니다. 더 좋은 코드는 책을 읽고 공부하면서도 작성될 수 있지만, 여러 사람과 대화하면서도 작성될 수 있다고 생각했습니다.

그런 생각을 하고 곧바로 프리코스 내에서 TDD 스터디 모임과 홍대/합정 백엔드 모임에 참가 신청을 냈습니다. 아직 2주차가 진행 중이라 시작하진 못했지만, 수요일에 모임에 나가서 의견을 주고받을 생각을 하니 설렙니다.

